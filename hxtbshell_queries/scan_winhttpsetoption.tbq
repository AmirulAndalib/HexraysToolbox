{"version": 1.0, "query": "class ScanWinHttpSetOption(hxtb.query_object_t):\n    def __init__(self):\n        \"\"\"example that can be used to locate vulns like CVE-2020-15589\"\"\" \n        self.ea = idaapi.get_name_ea(idaapi.BADADDR, \"WinHttpSetOption\")\n        self.n = 0\n\n    def _get_xrefs(self):\n        from idautils import CodeRefsTo\n        ea_list = []\n        for xea in CodeRefsTo(self.ea, 1):\n            xf = idaapi.get_func(xea)\n            if xf:\n                ea_list.append(xf.start_ea)\n        # remove duplicates\n        ea_list = list(dict.fromkeys(ea_list))\n        return ea_list\n\n    def init(self):\n        print(self.__init__.__doc__)\n        if self.ea == idaapi.BADADDR:\n            idaapi.warning(\"Could not locate WinHttpSetOption()!\")\n            return False\n        return True\n               \n    def run(self, f, i):\n        # WINHTTP_OPTION_SECURITY_FLAGS = 31\n        match = (i.op is idaapi.cot_call and \n        i.x.op is idaapi.cot_obj and\n        i.x.obj_ea == self.ea and\n        len(i.a) == 4 and\n        i.a[1].op is idaapi.cot_num and\n        i.a[1].numval() & 0x1f == 31)\n        self.n += int(match)\n        return match\n        \n    def exit(self):\n        print(\"Done! %d matches in total\" % self.n)\n        return\n\n    def get_scope(self):\n        return self._get_xrefs()\n\nreturn ScanWinHttpSetOption()", "query_type": 0, "ast_type": 0, "help": "find calls to ScanWinHttpSetOption() / WINHTTP_OPTION_SECURITY_FLAGS", "scope": 3, "type": 1}