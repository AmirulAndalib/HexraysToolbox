{"version": 1.0, "query": "class ReallocScan():\n    def __init__(self):\n        self.ea = idaapi.get_name_ea(idaapi.BADADDR, \"realloc\")\n        self.n = 0\n\n    def _get_xrefs(self):\n        from idautils import CodeRefsTo\n        ea_list = []\n        for xea in CodeRefsTo(self.ea, 1):\n            xf = idaapi.get_func(xea)\n            if xf:\n                ea_list.append(xf.start_ea)\n        # remove duplicates\n        ea_list = list(dict.fromkeys(ea_list))\n        return ea_list\n\n    def _find_parent_cot(self, f, i, cot):\n        parent = f.body.find_parent_of(i)\n        while parent and parent.op != idaapi.cit_expr:\n            if parent.op is idaapi.cot_asg:\n                return parent.cexpr\n            parent = f.body.find_parent_of(parent)\n        return None\n\n    def init(self):\n        if self.ea == idaapi.BADADDR:\n            idaapi.warning(\"Could not locate realloc()!\")\n            return False\n        return True\n               \n    def run(self, f, i):\n        self.n += 1\n        if (i.op is idaapi.cot_call and\n        i.x.op is idaapi.cot_obj and\n        i.x.obj_ea == self.ea):\n            if len(i.a) == 2:\n                if i.a[0].op is idaapi.cot_var:\n                    idx = i.a[0].v.idx\n                    parent_asg = self._find_parent_cot(f, i, idaapi.cot_asg)\n                    if parent_asg:\n                        if parent_asg.x.op is idaapi.cot_var and parent_asg.x.v.idx == idx:\n                            return 1\n        return 0\n        \n    def exit(self):\n        print(\"Done! Scanned %d items in total\" % self.n)\n        return\n\n    def get_scope(self):\n        return self._get_xrefs()\n\nreturn ReallocScan()", "query_type": 0, "ast_type": 0, "help": "find potential realloc memory leaks", "scope": 3, "type": 1}